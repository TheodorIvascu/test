name: Test Case Management

on:
  issues:
    types: [opened, edited, labeled]

permissions:
  issues: write  # Grants permission to modify issues (add labels, assign, close)
  contents: read # Grants permission to read repository contents

jobs:
  manage-test-cases:
    runs-on: ubuntu-latest
    steps:
      - name: Process test case issue
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const issue = context.payload.issue;
            const issueBody = issue.body || "";
            const issueLabels = issue.labels.map(label => label.name);

            let labelsToAdd = [];
            let labelsToRemove = [];

            // Ensure the issue has the "Test Case" label
            if (!issueLabels.includes("Test Case")) {
              console.log("This issue does not have the 'Test Case' label, skipping.");
              return;
            }

            // Check for checkboxes in the issue body
            if (issueBody.includes("- [x] Cross-browser testing is required")) {
              labelsToAdd.push("Cross-browser");
            } else {
              labelsToRemove.push("Cross-browser");
            }

            if (issueBody.includes("- [x] Cross-OS testing is required")) {
              labelsToAdd.push("Cross-OS");
            } else {
              labelsToRemove.push("Cross-OS");
            }

            // Add missing labels
            if (labelsToAdd.length > 0) {
              await github.rest.issues.addLabels({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: issue.number,
                labels: labelsToAdd
              });
            }

            // Remove labels if checkbox is unchecked
            for (let label of labelsToRemove) {
              if (issueLabels.includes(label)) {
                await github.rest.issues.removeLabel({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: issue.number,
                  name: label
                }).catch(error => console.log(`Label '${label}' not found or already removed.`));
              }
            }

            // Assign issue to reporter if "NMI" label is added
            if (issueLabels.includes("NMI")) {
              await github.rest.issues.addAssignees({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: issue.number,
                assignees: [issue.user.login]
              });
            }

            // Handle CNT and Duplicate labels, do not close the issue
            if (issueLabels.includes("CNT") || issueLabels.includes("Duplicate")) {
              const commentBody = `This issue is marked as ${issueLabels.includes("CNT") ? "CNT" : "Duplicate"}. It will not be closed automatically.`;
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: issue.number,
                body: commentBody
              });
              return; // Do not proceed with closing or labeling the issue further
            }

            // Only process test results if the test case label exists
            if (issueBody.includes("- [x] All expected results have passed")) {
              await github.rest.issues.addLabels({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: issue.number,
                labels: ["Status: Done"]
              });
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: issue.number,
                body: "Test case has been found as Passed. Done."
              });
            }

            if (issueBody.includes("- [x] Some expected results have passed") || 
                issueBody.includes("- [x] All expected results have failed")) {
              await github.rest.issues.addLabels({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: issue.number,
                labels: ["Status: Fail"]
              });
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: issue.number,
                body: "Test case has been found as Failed."
              });
            }
